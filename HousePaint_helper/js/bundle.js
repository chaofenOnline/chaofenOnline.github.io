var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var GameUI_1 = require("./script/GameUI");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("script/GameUI.ts", GameUI_1.default);
    };
    GameConfig.width = 640;
    GameConfig.height = 1136;
    GameConfig.scaleMode = "fixedwidth";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "test/TestScene.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{"./script/GameUI":3}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        //加载IDE指定的场景
        GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene);
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":1}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("./../ui/layaMaxUI");
var Maze_1 = require("./Maze");
var MazeGenerator = /** @class */ (function (_super) {
    __extends(MazeGenerator, _super);
    function MazeGenerator() {
        var _this = _super.call(this) || this;
        // 迷宫节点
        _this.mazeSprite = new Array();
        // 迷宫单元图片尺寸
        _this.unitWidth = 30;
        // 迷宫参数
        _this.width = 7;
        _this.height = 7;
        _this.diff = 5;
        _this.maxTryTimes = 100000;
        // 图片路径
        _this.url_player = "res/player.png";
        _this.url_empty = "res/empty.png";
        _this.url_wall = "res/wall.png";
        _this.url_passed = "res/passed.png";
        // 障碍物资源列表组
        _this.barriersComboBox = new Array();
        // 障碍物标识列表
        _this.barriersList = ["Bush_11", "Sponge", "ElecBox_11", "Mail_11", "Plate_11", "Pod_11", "Pod_21", "Went_11", "Wall_Wo_Hor", "Wall_Wo_Ver", "Brick_Hor_1", "Wall_Wo_Ver", "Brick_Hor_2", "Brick_Ver_1", "Wall_Hor_1", "Wall_Hor_2", "Wall_Hor_3", "Wall_Bot_B_1", "Wall_Bot_W_1", "Wall_Bot_W_2", "Window_11", "Window_12", "Window_21", "Window_22", "Window_23", "Window_C11", "Window_C12", "Window_C21", "Window_C22", "Window_C23", "Window_G11", "Window_G12", "Window_G21", "Window_G22", "Window_G23", "Window_B11", "Window_B12", "Window_B21", "Window_B22", "Window_B23", "Window_W11", "Window_W12", "Window_W21", "Window_W22", "Window_W23", "Door_24", "Door_G24", "Door_B24", "Door_C24", "Door_W24"];
        _this.barriersNum = 48;
        // 初始化场景
        _this.initScene();
        // 键盘操作监听
        _this.keyboardListen();
        return _this;
    }
    // 初始化场景
    MazeGenerator.prototype.initScene = function () {
        //添加场景
        var scene = Laya.stage.addChild(new Laya.Scene());
        Laya.stage.bgColor = "#d5d7f4";
        Laya.stage.width = 1000;
        Laya.stage.height = 1000;
        //添加迷宫盒
        // this.mazeBox = scene.addChild(new Laya.Sprite()) as Laya.Sprite;
        this.mazeBox.x = 100;
        this.mazeBox.y = 100;
    };
    // 迷宫生成
    MazeGenerator.prototype.generateMaze = function () {
        // 设置迷宫参数
        this.unitWidth = (this.stage.width - this.mazeBox.x * 2) / this.width;
        this.unitWidth = this.unitWidth > 100 ? 100 : this.unitWidth;
        // 生成迷宫矩阵
        this.maze = new Maze_1.default(this.width, this.height, this.diff);
        var x = Math.floor(Math.random() * this.width);
        var y = Math.floor(Math.random() * this.height);
        var tryTimes = 0;
        console.log("Maze generating...");
        while (!this.maze.generate(x, y) && tryTimes < this.maxTryTimes) {
            x = Math.floor(Math.random() * this.width);
            y = Math.floor(Math.random() * this.height);
            tryTimes++;
        }
        if (tryTimes >= this.maxTryTimes) {
            console.log("Failed. Try again");
            return;
        }
        console.log("Done. Try times: " + tryTimes);
        this.outMaze = this.maze.getMaze();
        // 渲染迷宫及玩家
        this.renderMaze();
    };
    // 渲染迷宫及玩家
    MazeGenerator.prototype.renderMaze = function () {
        var _this = this;
        this.mazeBox.visible = true;
        var barriersLabel = "";
        var flag = false;
        for (var _i = 0, _a = this.barriersList; _i < _a.length; _i++) {
            var item = _a[_i];
            if (flag) {
                barriersLabel += ",";
            }
            flag = true;
            barriersLabel += item;
        }
        // 渲染迷宫
        this.mazeSprite = new Array();
        var _loop_1 = function (i) {
            this_1.mazeSprite.push(new Array());
            this_1.barriersComboBox.push(new Array());
            var _loop_2 = function (j) {
                var unit = new Laya.Sprite();
                unit.texture = new Laya.Texture();
                this_1.mazeBox.addChild(unit);
                if (this_1.outMaze[i][j]) {
                    unit.texture.load(this_1.url_wall);
                }
                else {
                    unit.texture.load(this_1.url_empty);
                }
                unit.texture.height = this_1.unitWidth;
                unit.width = this_1.unitWidth;
                unit.height = this_1.unitWidth;
                unit.x = i * this_1.unitWidth;
                unit.y = j * this_1.unitWidth;
                this_1.mazeSprite[i].push(unit);
                // 资源下拉表
                var comboBox = new Laya.ComboBox("comp/combobox.png", barriersLabel);
                comboBox.width = this_1.unitWidth * 1.5;
                comboBox.height = this_1.unitWidth / 4;
                comboBox.x = (i + 1) * this_1.unitWidth - comboBox.width;
                comboBox.y = j * this_1.unitWidth;
                comboBox.zOrder = 1;
                comboBox.visibleNum = 20;
                comboBox.visible = false;
                // 下拉列表内滚动条
                comboBox.scrollBarSkin = "comp/vscroll.png";
                comboBox.scrollBar.scaleX /= 2;
                this_1.mazeBox.addChild(comboBox);
                this_1.barriersComboBox[i].push(comboBox);
                // 鼠标监听
                this_1.mazeSprite[i][j].on(Laya.Event.MOUSE_UP, this_1, function () {
                    _this.posLabel.changeText("坐标: (" + i + "," + j + ")");
                    if (_this.outMaze[i][j]) {
                        _this.barriersComboBox[i][j].visible = true;
                        var urlString = _this.barriersComboBox[i][j].selectedLabel;
                        if (urlString) {
                            urlString = "res/barriers_texture/" + urlString + ".png";
                            _this.mazeSprite[i][j].texture.load(urlString);
                            _this.barriersComboBox[i][j].visible = false;
                        }
                    }
                });
            };
            for (var j = 0; j < this_1.height; j++) {
                _loop_2(j);
            }
        };
        var this_1 = this;
        // 初始化迷宫单元
        for (var i = 0; i < this.width; i++) {
            _loop_1(i);
        }
        // 渲染玩家
        this.player = new Laya.Sprite();
        this.player.width = this.unitWidth;
        this.player.height = this.unitWidth;
        this.player.texture = new Laya.Texture();
        this.player.texture.load(this.url_player);
        this.player.x = this.maze.startX * this.unitWidth;
        this.player.y = this.maze.startY * this.unitWidth;
        this.mazeBox.addChild(this.player);
        // 玩家位置记录
        this.idx_x = this.maze.startX;
        this.idx_y = this.maze.startY;
        // 玩家所在位置涂色
        this.mazeSprite[this.idx_x][this.idx_y].texture.load(this.url_passed);
    };
    // 键盘操作监听
    MazeGenerator.prototype.keyboardListen = function () {
        var _this = this;
        // 键盘按下处理
        Laya.stage.on(Laya.Event.KEY_DOWN, this, function (e) {
            if (_this.outMaze) {
                // left
                if (e["keyCode"] === 37) {
                    while (_this.idx_x > 0 && !_this.outMaze[_this.idx_x - 1][_this.idx_y]) {
                        _this.idx_x--;
                        // 改变玩家位置
                        _this.player.x -= _this.unitWidth;
                        // 玩家位置涂色
                        if (_this.mazeSprite[_this.idx_x][_this.idx_y].texture.url != _this.url_passed) {
                            _this.mazeSprite[_this.idx_x][_this.idx_y].texture.load(_this.url_passed);
                        }
                    }
                }
                // up
                else if (e["keyCode"] === 38) {
                    while (_this.idx_y > 0 && !_this.outMaze[_this.idx_x][_this.idx_y - 1]) {
                        _this.idx_y--;
                        // 改变玩家位置
                        _this.player.y -= _this.unitWidth;
                        // 玩家位置涂色
                        if (_this.mazeSprite[_this.idx_x][_this.idx_y].texture.url != _this.url_passed) {
                            _this.mazeSprite[_this.idx_x][_this.idx_y].texture.load(_this.url_passed);
                        }
                    }
                }
                // right
                else if (e["keyCode"] === 39) {
                    while (_this.idx_x < _this.width - 1 && !_this.outMaze[_this.idx_x + 1][_this.idx_y]) {
                        _this.idx_x++;
                        // 改变玩家位置
                        _this.player.x += _this.unitWidth;
                        // 玩家位置涂色
                        if (_this.mazeSprite[_this.idx_x][_this.idx_y].texture.url != _this.url_passed) {
                            _this.mazeSprite[_this.idx_x][_this.idx_y].texture.load(_this.url_passed);
                        }
                    }
                }
                // down
                else if (e["keyCode"] === 40) {
                    while (_this.idx_y < _this.height - 1 && !_this.outMaze[_this.idx_x][_this.idx_y + 1]) {
                        _this.idx_y++;
                        // 改变玩家位置
                        _this.player.y += _this.unitWidth;
                        // 玩家位置涂色
                        if (_this.mazeSprite[_this.idx_x][_this.idx_y].texture.url != _this.url_passed) {
                            _this.mazeSprite[_this.idx_x][_this.idx_y].texture.load(_this.url_passed);
                        }
                    }
                }
                // restart
                else if (e["keyCode"] === 82) {
                    // 重置迷宫单元
                    for (var i = 0; i < _this.width; i++) {
                        for (var j = 0; j < _this.height; j++) {
                            if (!_this.outMaze[i][j]) {
                                if (_this.mazeSprite[i][j].texture.url != _this.url_empty) {
                                    _this.mazeSprite[i][j].texture.load(_this.url_empty);
                                }
                            }
                        }
                    }
                    // 重置玩家
                    _this.idx_x = _this.maze.startX;
                    _this.idx_y = _this.maze.startY;
                    _this.player.x = _this.idx_x * _this.unitWidth;
                    _this.player.y = _this.idx_y * _this.unitWidth;
                    _this.mazeSprite[_this.idx_x][_this.idx_y].texture.load(_this.url_passed);
                }
            }
            // generate maze
            if (e["keyCode"] === 71) {
                if (!_this.widthInput.text || !_this.heightInput.text || !_this.diffInput.text) {
                    return;
                }
                _this.maxTryTimes = 1000000;
                if (_this.trytimesInput.text) {
                    _this.maxTryTimes *= (+_this.trytimesInput.text);
                }
                _this.width = +_this.widthInput.text;
                _this.height = +_this.heightInput.text;
                _this.diff = +_this.diffInput.text;
                _this.generateMaze();
            }
            // print data
            else if (e["keyCode"] === 80) {
                _this.print();
            }
        });
    };
    // 输出迷宫数据
    MazeGenerator.prototype.print = function () {
        var data = "Maze msg: {";
        data += "w:" + this.width + ", h:" + this.height + ", ";
        var flag = false;
        data += "barriersArr:[";
        for (var i = 0; i < this.width; i++) {
            for (var j = 0; j < this.height; j++) {
                if (this.outMaze[i][j]) {
                    if (flag) {
                        data += ", ";
                    }
                    flag = true;
                    data += "\"" + i + "," + j + "," + this.barriersComboBox[i][j].selectedLabel + "\"";
                }
            }
        }
        data += "], ";
        data += "player_pos:\"" + this.maze.startX + "," + this.maze.startY + "\"";
        data += "}";
        console.log(data);
    };
    return MazeGenerator;
}(layaMaxUI_1.ui.test.TestSceneUI));
exports.default = MazeGenerator;
},{"./../ui/layaMaxUI":5,"./Maze":4}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Maze = /** @class */ (function () {
    function Maze(width, height, minCount) {
        /** 记录迷宫状态，每个单元格状态有 empty, wall, undefined 三种 */
        this.maze = new Array();
        /** 输出迷宫矩阵, 每个单元格两种状态: true 为墙, false 为空 */
        this.outMaze = new Array();
        /** 迷宫解法路径 */
        this.solution = [];
        /** 最小未定义单元格数, 用于结束迷宫生成，结束时未定义皆填补为墙, 数值体现难度 */
        this.minCount = 3;
        /** 无效 randomMove 计数 */
        this.unchangeCnt = 0;
        this.maxUnchangeCnt = 3;
        /** 空单元格数 */
        this.emptyCnt = 0;
        /** 重要墙单元格数 */
        this.wallCnt = 0;
        /** 检验模式计数 */
        this.checkCnt = 0;
        this.maxUnchangeCntCheck = 100;
        this.width = width;
        this.height = height;
        this.count = width * height;
        this.minCount = minCount;
        // 生成初始迷宫
        for (var x = 0; x < this.width; x++) {
            this.maze.push(new Array());
            this.outMaze.push(new Array());
            for (var y = 0; y < this.height; y++) {
                this.maze[x].push("undefined");
                this.outMaze[x].push(true);
            }
        }
    }
    /** 重置并随机生成新迷宫
     *  Input - 起点坐标(x,y)
     *  Output - 生成状态：生成成功为 true
     * */
    Maze.prototype.generate = function (x, y) {
        // 记录起点
        this.startX = x;
        this.startY = y;
        // 重置迷宫所有单元格状态
        for (var i = 0; i < this.width; i++) {
            for (var j = 0; j < this.height; j++) {
                this.maze[i][j] = "undefined";
                this.outMaze[i][j] = true;
            }
        }
        // 重置计数器
        this.count = this.width * this.height;
        this.emptyCnt = 0;
        // 设置当前位置为空
        if (this.setState(x, y, "empty")) {
            return true;
        }
        // 递归随机行走
        if (this.randomMove(x, y, this.count, false)) {
            for (var i = 0; i < this.width; i++) {
                for (var j = 0; j < this.height; j++) {
                    if (this.maze[i][j] === "empty") {
                        this.outMaze[i][j] = false;
                    }
                }
            }
            // 检验地图难度，使得玩家前几步骤操作有高容错率
            if (this.check()) {
                return true;
            }
        }
        return false;
    };
    /** 随机选择方向生成路径
     *  Input - 起点坐标(x,y)
     *          验证模式标记: true 为验证模式
     *  Output - 生成状态：成功为 true
     * */
    Maze.prototype.randomMove = function (x, y, preCount, isCheck) {
        if (isCheck === void 0) { isCheck = false; }
        // 判断四个方向是否可达
        var directionList = [];
        if (x > 0 && this.maze[x - 1][y] !== "wall") {
            if (this.solution && !(this.solution[this.solution.length - 1] === "right" && this.solution[this.solution.length - 2] === "left"))
                directionList.push("left");
        }
        if (x < this.width - 1 && this.maze[x + 1][y] !== "wall") {
            if (this.solution && !(this.solution[this.solution.length - 1] === "left" && this.solution[this.solution.length - 2] === "right"))
                directionList.push("right");
        }
        if (y > 0 && this.maze[x][y - 1] !== "wall") {
            if (this.solution && !(this.solution[this.solution.length - 1] === "down" && this.solution[this.solution.length - 2] === "up"))
                directionList.push("up");
        }
        if (y < this.height - 1 && this.maze[x][y + 1] !== "wall") {
            if (this.solution && !(this.solution[this.solution.length - 1] === "up" && this.solution[this.solution.length - 2] === "down"))
                directionList.push("down");
        }
        // 若四面皆为墙，则生成失败，该情况理应不存在
        if (!directionList) {
            return false;
        }
        // 随机选择方向
        var direction = directionList[Math.floor(Math.random() * directionList.length)];
        // 记录
        this.solution.push(direction);
        if (direction === "left") {
            // 最大可达路径长度: 本位置出发最长连续无墙单元格数
            var maxPathLength = 1;
            while (x - maxPathLength > 0 && this.maze[x - maxPathLength - 1][y] !== "wall") {
                maxPathLength++;
            }
            // 最小可达路径长度: 本位置出发最长连续空单元格数
            var minPathLength = 1;
            while (x - minPathLength > 0 && this.maze[x - minPathLength - 1][y] === "empty") {
                minPathLength++;
            }
            // 随机选择路径长度
            var pathLength = Math.ceil(Math.random() * (maxPathLength - minPathLength) + minPathLength);
            // 修正路径，末端不能为空
            while (x - pathLength - 1 >= 0 && this.maze[x - pathLength - 1][y] === "empty") {
                pathLength--;
            }
            // 验证模式额外处理
            pathLength = isCheck ? maxPathLength : pathLength;
            // 设置路径上单元格为空
            for (var i = 1; i <= pathLength; i++) {
                x--;
                if (this.setState(x, y, "empty", isCheck)) {
                    return true;
                }
            }
            // 设置路径末端(已不可能为空)为墙
            if (x > 0) {
                if (this.setState(x - 1, y, "wall", isCheck)) {
                    return true;
                }
            }
        }
        else if (direction === "right") {
            // 最大可达路径长度: 本位置出发最长连续无墙单元格数
            var maxPathLength = 1;
            while (x + maxPathLength < this.width - 1 && this.maze[x + maxPathLength + 1][y] !== "wall") {
                maxPathLength++;
            }
            // 最小可达路径长度: 本位置出发最长连续空单元格数
            var minPathLength = 1;
            while (x + minPathLength < this.width - 1 && this.maze[x + minPathLength + 1][y] === "empty") {
                minPathLength++;
            }
            // 随机选择路径长度
            var pathLength = Math.ceil(Math.random() * (maxPathLength - minPathLength) + minPathLength);
            // 修正路径，末端不能为空
            while (x + pathLength + 1 < this.width && this.maze[x + pathLength + 1][y] === "empty") {
                pathLength--;
            }
            // 验证模式额外处理
            pathLength = isCheck ? maxPathLength : pathLength;
            // 设置路径上单元格为空
            for (var i = 1; i <= pathLength; i++) {
                x++;
                if (this.setState(x, y, "empty", isCheck)) {
                    return true;
                }
            }
            // 设置路径末端(已不可能为空)为墙
            if (x < this.width - 1) {
                if (this.setState(x + 1, y, "wall", isCheck)) {
                    return true;
                }
            }
        }
        else if (direction === "up") {
            // 最大可达路径长度: 本位置出发最长连续无墙单元格数
            var maxPathLength = 1;
            while (y - maxPathLength > 0 && this.maze[x][y - maxPathLength - 1] !== "wall") {
                maxPathLength++;
            }
            // 最小可达路径长度: 本位置出发最长连续空单元格数
            var minPathLength = 1;
            while (y - minPathLength > 0 && this.maze[x][y - minPathLength - 1] === "empty") {
                minPathLength++;
            }
            // 随机选择路径长度
            var pathLength = Math.ceil(Math.random() * (maxPathLength - minPathLength) + minPathLength);
            // 修正路径，末端不能为空
            while (y - pathLength - 1 >= 0 && this.maze[x][y - pathLength - 1] === "empty") {
                pathLength--;
            }
            // 验证模式额外处理
            pathLength = isCheck ? maxPathLength : pathLength;
            // 设置路径上单元格为空
            for (var i = 1; i <= pathLength; i++) {
                y--;
                if (this.setState(x, y, "empty", isCheck)) {
                    return true;
                }
            }
            // 设置路径末端(已不可能为空)为墙
            if (y > 0) {
                if (this.setState(x, y - 1, "wall", isCheck)) {
                    return true;
                }
            }
        }
        else if (direction === "down") {
            // 最大可达路径长度: 本位置出发最长连续无墙单元格数
            var maxPathLength = 1;
            while (y + maxPathLength < this.height - 1 && this.maze[x][y + maxPathLength + 1] !== "wall") {
                maxPathLength++;
            }
            // 最小可达路径长度: 本位置出发最长连续空单元格数
            var minPathLength = 1;
            while (y + minPathLength < this.height - 1 && this.maze[x][y + minPathLength + 1] === "empty") {
                minPathLength++;
            }
            // 随机选择路径长度
            var pathLength = Math.ceil(Math.random() * (maxPathLength - minPathLength) + minPathLength);
            // 修正路径，末端不能为空
            while (y + pathLength + 1 < this.height && this.maze[x][y + pathLength + 1] === "empty") {
                pathLength--;
            }
            // 验证模式额外处理
            pathLength = isCheck ? maxPathLength : pathLength;
            // 设置路径上单元格为空
            for (var i = 1; i <= pathLength; i++) {
                y++;
                if (this.setState(x, y, "empty", isCheck)) {
                    return true;
                }
            }
            // 设置路径末端(已不可能为空)为墙
            if (y < this.height - 1) {
                if (this.setState(x, y + 1, "wall", isCheck)) {
                    return true;
                }
            }
        }
        // 生成模式
        if (!isCheck) {
            // 若计数无变化，判断生成路径重复，生成失败
            if (this.count === preCount) {
                this.unchangeCnt++;
                if (this.unchangeCnt >= this.maxUnchangeCnt) {
                    return false;
                }
            }
            else {
                this.unchangeCnt = 0;
            }
            // 递归：随机选择下一方向
            return this.randomMove(x, y, this.count);
        }
        // 检验模式
        else {
            // 若检验计数无变化
            if (this.checkCnt === preCount) {
                this.unchangeCnt++;
                if (this.unchangeCnt >= this.maxUnchangeCntCheck) {
                    return false;
                }
            }
            else {
                this.unchangeCnt = 0;
            }
            // 递归：随机选择下一方向
            return this.randomMove(x, y, this.checkCnt, true);
        }
    };
    /** 单元格状态赋值，并更新未定义计数
     *  Input - (x,y): 单元格坐标
     *          state: 单元格目标状态( empty, wall )
     *          验证模式标记: true 为验证模式
     *  Output - 迷宫生成结束标志：结束为 true
     * */
    Maze.prototype.setState = function (x, y, state, isCheck) {
        if (isCheck === void 0) { isCheck = false; }
        var preState = this.maze[x][y];
        // 检验模式
        if (isCheck) {
            if (preState === "empty") {
                this.maze[x][y] = "passed";
                this.checkCnt++;
                if (this.checkCnt === this.emptyCnt) {
                    // 迷宫检验结束，检验成功
                    return true;
                }
            }
            return false;
        }
        // 生成模式
        else {
            this.maze[x][y] = state;
            if (preState === "undefined") {
                this.count--;
                if (state === "empty") {
                    this.emptyCnt++;
                }
                else if (state === "wall") {
                    this.wallCnt++;
                }
                if (this.count <= this.minCount) {
                    // 迷宫生成结束，生成成功
                    return true;
                }
            }
            return false;
        }
    };
    /** 检验迷宫，目标使得玩家前几步骤操作有高容错率 */
    Maze.prototype.check = function () {
        // 起点
        var x;
        var y;
        // // 遍历每个空节点
        // for (let i: number = 0; i < this.width; i++) {
        //     for (let j: number = 0; j < this.height; j++) {
        //         if (!this.outMaze[i][j]) {
        //             // 尝试多次
        //             for (let times: number = 0; times < 3; times++) {
        //                 // 重置迷宫参数
        //                 this.resetCheck();
        //                 this.setState(i, j, "passed", true);
        //                 if (!this.randomMove(i, j, this.emptyCnt, true)) {
        //                     console.log("check failed.");
        //                     return false;
        //                 }
        //                 console.log("check seccessed.");
        //                 console.log("start: (" + i + "," + j + ")");
        //                 console.log(this.solution);
        //             }
        //         }
        //     }
        // }
        // // 验证成功
        // return true;
        // 遍历四个方向是否均可解
        for (var times = 0; times < 10; times++) {
            // left
            this.resetCheck();
            // 重置起点
            x = this.startX;
            y = this.startY;
            this.setState(x, y, "passed", true);
            while (x > 0 && this.maze[x - 1][y] === "empty") {
                x--;
                this.setState(x, y, "passed", true);
            }
            // 递归随机行走
            if (!this.randomMove(x, y, this.emptyCnt, true)) {
                // console.log("check left failed.");
                return false;
            }
            // right
            this.resetCheck();
            // 重置起点
            x = this.startX;
            y = this.startY;
            this.setState(x, y, "passed", true);
            while (x < this.width - 1 && this.maze[x + 1][y] === "empty") {
                x++;
                this.setState(x, y, "passed", true);
            }
            // 递归随机行走
            if (!this.randomMove(x, y, this.emptyCnt, true)) {
                // console.log("check right failed.");
                return false;
            }
            // up
            this.resetCheck();
            // 重置起点
            x = this.startX;
            y = this.startY;
            this.setState(x, y, "passed", true);
            while (y > 0 && this.maze[x][y - 1] === "empty") {
                y--;
                this.setState(x, y, "passed", true);
            }
            // 递归随机行走
            if (!this.randomMove(x, y, this.emptyCnt, true)) {
                // console.log("check up failed.");
                return false;
            }
            // down
            this.resetCheck();
            // 重置起点
            x = this.startX;
            y = this.startY;
            this.setState(x, y, "passed", true);
            while (y < this.height - 1 && this.maze[x][y + 1] === "empty") {
                y++;
                this.setState(x, y, "passed", true);
            }
            // 递归随机行走
            if (!this.randomMove(x, y, this.emptyCnt, true)) {
                // console.log("check down failed.");
                return false;
            }
            // console.log("check seccessed. times: " + times + "/9");
        }
        // 检验成功
        return true;
    };
    Maze.prototype.resetCheck = function () {
        // 重置计数
        this.checkCnt = 0;
        // 重置迷宫
        for (var i = 0; i < this.width; i++) {
            for (var j = 0; j < this.height; j++) {
                if (this.outMaze[i][j]) {
                    this.maze[i][j] = "wall";
                }
                else {
                    this.maze[i][j] = "empty";
                }
            }
        }
        // 重置解法
        this.solution = [];
    };
    /** 输出迷宫矩阵, 每个单元格两种状态: true 为墙, false 为空 */
    Maze.prototype.getMaze = function () {
        return this.outMaze;
    };
    return Maze;
}());
exports.default = Maze;
},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Scene = Laya.Scene;
var REG = Laya.ClassUtils.regClass;
var ui;
(function (ui) {
    var test;
    (function (test) {
        var TestSceneUI = /** @class */ (function (_super) {
            __extends(TestSceneUI, _super);
            function TestSceneUI() {
                return _super.call(this) || this;
            }
            TestSceneUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("test/TestScene");
            };
            return TestSceneUI;
        }(Scene));
        test.TestSceneUI = TestSceneUI;
        REG("ui.test.TestSceneUI", TestSceneUI);
    })(test = ui.test || (ui.test = {}));
})(ui = exports.ui || (exports.ui = {}));
},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
